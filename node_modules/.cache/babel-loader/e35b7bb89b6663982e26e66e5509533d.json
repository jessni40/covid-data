{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jessicani/Desktop/react-projects/covid-tracker/src/components/Chart/Chart.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { fetchDailyData } from \"../../api\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport styles from \"./Chart.module.css\";\n\nconst Chart = ({\n  data: {\n    confirmed,\n    deaths,\n    recovered\n  },\n  country\n}) => {\n  _s();\n\n  const [dailyData, setDailyData] = useState([]);\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setDailyData(await fetchDailyData());\n    };\n\n    fetchAPI();\n  }, []); // if there is data in the dailyData array, populate the\n  // line graph. Else, return null.\n\n  const lineChart = dailyData.length ? /*#__PURE__*/_jsxDEV(Line, {\n    data: {\n      // goes through dailyData, gets all the dates, returns the dates\n      labels: dailyData.map(({\n        date\n      }) => date),\n      datasets: [{\n        data: dailyData.map(({\n          confirmed\n        }) => confirmed),\n        label: \"Infected\",\n        borderColor: \"#3333ff\",\n        // backgroundColor: \"#81d2f8\",\n        fill: true\n      }, {\n        data: dailyData.map(({\n          deaths\n        }) => deaths),\n        label: \"Deaths\",\n        borderColor: \"red\",\n        backgroundColor: \"rgba(255,0,0,0,5)\",\n        fill: true\n      }]\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this) : null;\n  const barChart = confirmed ? /*#__PURE__*/_jsxDEV(Bar, {\n    data: {\n      labels: ['Infected', 'Recovered', 'Deaths'],\n      datasets: [{\n        label: 'People',\n        backgroundColor: ['#81d2f8', \"#81b29a\", \"9e2a2b\"],\n        data: [confirmed, recovered, deaths]\n      }]\n    },\n    options: {\n      legend: {\n        display: false\n      },\n      title: {\n        display: true,\n        text: `Current state in ${country}`\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this) : null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: country ? barChart : lineChart\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Chart, \"k/DxwZSu/1zHTtHlTKnhZOTCIIE=\");\n\n_c = Chart;\nexport default Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["/Users/jessicani/Desktop/react-projects/covid-tracker/src/components/Chart/Chart.jsx"],"names":["React","useState","useEffect","fetchDailyData","Line","Bar","styles","Chart","data","confirmed","deaths","recovered","country","dailyData","setDailyData","fetchAPI","lineChart","length","labels","map","date","datasets","label","borderColor","fill","backgroundColor","barChart","legend","display","title","text","container"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,iBAA1B;AACA,OAAOC,MAAP,MAAmB,oBAAnB;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAACC,EAAAA,IAAI,EAAE;AAACC,IAAAA,SAAD;AAAYC,IAAAA,MAAZ;AAAoBC,IAAAA;AAApB,GAAP;AAAuCC,EAAAA;AAAvC,CAAD,KAAqD;AAAA;;AACjE,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,EAAD,CAA1C;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,QAAQ,GAAG,YAAY;AAC3BD,MAAAA,YAAY,CAAC,MAAMX,cAAc,EAArB,CAAZ;AACD,KAFD;;AAIAY,IAAAA,QAAQ;AACT,GANQ,EAMN,EANM,CAAT,CAFiE,CAUjE;AACA;;AACA,QAAMC,SAAS,GAAGH,SAAS,CAACI,MAAV,gBAChB,QAAC,IAAD;AACE,IAAA,IAAI,EAAE;AACJ;AACAC,MAAAA,MAAM,EAAEL,SAAS,CAACM,GAAV,CAAc,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAcA,IAA5B,CAFJ;AAGJC,MAAAA,QAAQ,EAAE,CACR;AACEb,QAAAA,IAAI,EAAEK,SAAS,CAACM,GAAV,CAAc,CAAC;AAAEV,UAAAA;AAAF,SAAD,KAAmBA,SAAjC,CADR;AAEEa,QAAAA,KAAK,EAAE,UAFT;AAGEC,QAAAA,WAAW,EAAE,SAHf;AAIE;AACAC,QAAAA,IAAI,EAAE;AALR,OADQ,EAQR;AACEhB,QAAAA,IAAI,EAAEK,SAAS,CAACM,GAAV,CAAc,CAAC;AAAET,UAAAA;AAAF,SAAD,KAAgBA,MAA9B,CADR;AAEEY,QAAAA,KAAK,EAAE,QAFT;AAGEC,QAAAA,WAAW,EAAE,KAHf;AAIEE,QAAAA,eAAe,EAAE,mBAJnB;AAKED,QAAAA,IAAI,EAAE;AALR,OARQ;AAHN;AADR;AAAA;AAAA;AAAA;AAAA,UADgB,GAuBd,IAvBJ;AAyBA,QAAME,QAAQ,GACZjB,SAAS,gBAEL,QAAC,GAAD;AACA,IAAA,IAAI,EAAI;AACNS,MAAAA,MAAM,EAAE,CAAC,UAAD,EAAa,WAAb,EAA0B,QAA1B,CADF;AAENG,MAAAA,QAAQ,EAAE,CAAC;AACTC,QAAAA,KAAK,EAAE,QADE;AAETG,QAAAA,eAAe,EAAE,CAAC,SAAD,EAAY,SAAZ,EAAuB,QAAvB,CAFR;AAGTjB,QAAAA,IAAI,EAAE,CAACC,SAAD,EAAYE,SAAZ,EAAuBD,MAAvB;AAHG,OAAD;AAFJ,KADR;AASA,IAAA,OAAO,EAAI;AACTiB,MAAAA,MAAM,EAAE;AAACC,QAAAA,OAAO,EAAE;AAAV,OADC;AAETC,MAAAA,KAAK,EAAE;AAACD,QAAAA,OAAO,EAAE,IAAV;AAAgBE,QAAAA,IAAI,EAAG,oBAAmBlB,OAAQ;AAAlD;AAFE;AATX;AAAA;AAAA;AAAA;AAAA,UAFK,GAgBJ,IAjBP;AAoBA,sBAAO;AAAK,IAAA,SAAS,EAAEN,MAAM,CAACyB,SAAvB;AAAA,cACJnB,OAAO,GAAGc,QAAH,GAAcV;AADjB;AAAA;AAAA;AAAA;AAAA,UAAP;AAGD,CA5DD;;GAAMT,K;;KAAAA,K;AA6DN,eAAeA,KAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { fetchDailyData } from \"../../api\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport styles from \"./Chart.module.css\";\n\nconst Chart = ({data: {confirmed, deaths, recovered}, country}) => {\n  const [dailyData, setDailyData] = useState([]);\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setDailyData(await fetchDailyData());\n    };\n\n    fetchAPI();\n  }, []);\n\n  // if there is data in the dailyData array, populate the\n  // line graph. Else, return null.\n  const lineChart = dailyData.length ? (\n    <Line\n      data={{\n        // goes through dailyData, gets all the dates, returns the dates\n        labels: dailyData.map(({ date }) => date),\n        datasets: [\n          {\n            data: dailyData.map(({ confirmed }) => confirmed),\n            label: \"Infected\",\n            borderColor: \"#3333ff\",\n            // backgroundColor: \"#81d2f8\",\n            fill: true,\n          },\n          {\n            data: dailyData.map(({ deaths }) => deaths),\n            label: \"Deaths\",\n            borderColor: \"red\",\n            backgroundColor: \"rgba(255,0,0,0,5)\",\n            fill: true,\n          },\n        ],\n      }}\n    />\n  ) : null;\n\n  const barChart = (\n    confirmed \n      ? (\n        <Bar\n        data = {{\n          labels: ['Infected', 'Recovered', 'Deaths'],\n          datasets: [{\n            label: 'People',\n            backgroundColor: ['#81d2f8', \"#81b29a\", \"9e2a2b\"],\n            data: [confirmed, recovered, deaths]\n          }]\n        }}\n        options = {{\n          legend: {display: false},\n          title: {display: true, text: `Current state in ${country}`}\n        }}\n        />\n      ): null\n  );\n\n  return <div className={styles.container}>\n    {country ? barChart : lineChart }\n    </div>;\n};\nexport default Chart;\n"]},"metadata":{},"sourceType":"module"}