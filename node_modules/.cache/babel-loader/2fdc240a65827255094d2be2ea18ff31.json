{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jessicani/Desktop/react-projects/covid-tracker/src/components/Chart/Chart.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { fetchDailyData } from \"../../api\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport styles from \"./Chart.module.css\";\n\nconst Chart = () => {\n  _s();\n\n  const [dailyData, setDailyData] = useState([]);\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setDailyData(await fetchDailyData());\n    };\n\n    console.log(\"This is dailyData: \" + dailyData);\n    fetchAPI();\n  }, []); // if there is data in the dailyData array, populate the\n  // line graph. Else, return null.\n\n  const lineChart = dailyData.length ? /*#__PURE__*/_jsxDEV(Line, {\n    data: {\n      labels: dailyData.map(({\n        date\n      }) => date),\n      datasets: [{\n        data: dailyData.map(({\n          confirmed\n        }) => confirmed),\n        labels: \"Infected\",\n        borderColor: \"#3333ff\",\n        fill: true\n      }, {\n        data: dailyData.map(({\n          deaths\n        }) => deaths),\n        label: \"Infected\",\n        borderColor: \"red\",\n        backgroundColor: \"rgba(255,0,0,0,5)\",\n        fill: true\n      }]\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this) : null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: lineChart\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Chart, \"k/DxwZSu/1zHTtHlTKnhZOTCIIE=\");\n\n_c = Chart;\nexport default Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["/Users/jessicani/Desktop/react-projects/covid-tracker/src/components/Chart/Chart.jsx"],"names":["React","useState","useEffect","fetchDailyData","Line","Bar","styles","Chart","dailyData","setDailyData","fetchAPI","console","log","lineChart","length","labels","map","date","datasets","data","confirmed","borderColor","fill","deaths","label","backgroundColor","container"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,iBAA1B;AACA,OAAOC,MAAP,MAAmB,oBAAnB;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAClB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,EAAD,CAA1C;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMQ,QAAQ,GAAG,YAAY;AAC3BD,MAAAA,YAAY,CAAC,MAAMN,cAAc,EAArB,CAAZ;AACD,KAFD;;AAIAQ,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwBJ,SAApC;AAEAE,IAAAA,QAAQ;AACT,GARQ,EAQN,EARM,CAAT,CAFkB,CAYlB;AACA;;AACA,QAAMG,SAAS,GAAGL,SAAS,CAACM,MAAV,gBAChB,QAAC,IAAD;AACE,IAAA,IAAI,EAAE;AACJC,MAAAA,MAAM,EAAEP,SAAS,CAACQ,GAAV,CAAc,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAcA,IAA5B,CADJ;AAEJC,MAAAA,QAAQ,EAAE,CACR;AACEC,QAAAA,IAAI,EAAEX,SAAS,CAACQ,GAAV,CAAc,CAAC;AAAEI,UAAAA;AAAF,SAAD,KAAmBA,SAAjC,CADR;AAEEL,QAAAA,MAAM,EAAE,UAFV;AAGEM,QAAAA,WAAW,EAAE,SAHf;AAIEC,QAAAA,IAAI,EAAE;AAJR,OADQ,EAOR;AACEH,QAAAA,IAAI,EAAEX,SAAS,CAACQ,GAAV,CAAc,CAAC;AAAEO,UAAAA;AAAF,SAAD,KAAgBA,MAA9B,CADR;AAEEC,QAAAA,KAAK,EAAE,UAFT;AAGEH,QAAAA,WAAW,EAAE,KAHf;AAIEI,QAAAA,eAAe,EAAE,mBAJnB;AAKEH,QAAAA,IAAI,EAAE;AALR,OAPQ;AAFN;AADR;AAAA;AAAA;AAAA;AAAA,UADgB,GAqBd,IArBJ;AAuBA,sBAAO;AAAK,IAAA,SAAS,EAAEhB,MAAM,CAACoB,SAAvB;AAAA,cAAmCb;AAAnC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAtCD;;GAAMN,K;;KAAAA,K;AAuCN,eAAeA,KAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { fetchDailyData } from \"../../api\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport styles from \"./Chart.module.css\";\n\nconst Chart = () => {\n  const [dailyData, setDailyData] = useState([]);\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setDailyData(await fetchDailyData());\n    };\n\n    console.log(\"This is dailyData: \" + dailyData);\n\n    fetchAPI();\n  }, []);\n\n  // if there is data in the dailyData array, populate the\n  // line graph. Else, return null.\n  const lineChart = dailyData.length ? (\n    <Line\n      data={{\n        labels: dailyData.map(({ date }) => date),\n        datasets: [\n          {\n            data: dailyData.map(({ confirmed }) => confirmed),\n            labels: \"Infected\",\n            borderColor: \"#3333ff\",\n            fill: true,\n          },\n          {\n            data: dailyData.map(({ deaths }) => deaths),\n            label: \"Infected\",\n            borderColor: \"red\",\n            backgroundColor: \"rgba(255,0,0,0,5)\",\n            fill: true,\n          },\n        ],\n      }}\n    />\n  ) : null;\n\n  return <div className={styles.container}>{lineChart}</div>;\n};\nexport default Chart;\n"]},"metadata":{},"sourceType":"module"}